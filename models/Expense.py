# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ExpenseTracker.models.base_model_ import Model
from ExpenseTracker import util


class Expense(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, userid: int=None, amount: float=None, _datetime: datetime=None, description: str=None, comment: str=None):  # noqa: E501
        """Expense - a model defined in Swagger

        :param id: The id of this Expense.  # noqa: E501
        :type id: int
        :param userid: The userid of this Expense.  # noqa: E501
        :type userid: int
        :param amount: The amount of this Expense.  # noqa: E501
        :type amount: float
        :param _datetime: The _datetime of this Expense.  # noqa: E501
        :type _datetime: datetime
        :param description: The description of this Expense.  # noqa: E501
        :type description: str
        :param comment: The comment of this Expense.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'id': int,
            'userid': int,
            'amount': float,
            '_datetime': datetime,
            'description': str,
            'comment': str
        }

        self.attribute_map = {
            'id': 'id',
            'userid': 'userid',
            'amount': 'amount',
            '_datetime': 'datetime',
            'description': 'description',
            'comment': 'comment'
        }

        self._id = id
        self._userid = userid
        self._amount = amount
        self.__datetime = _datetime
        self._description = description
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Expense':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Expense of this Expense.  # noqa: E501
        :rtype: Expense
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Expense.


        :return: The id of this Expense.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Expense.


        :param id: The id of this Expense.
        :type id: int
        """

        self._id = id

    @property
    def userid(self) -> int:
        """Gets the userid of this Expense.


        :return: The userid of this Expense.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid: int):
        """Sets the userid of this Expense.


        :param userid: The userid of this Expense.
        :type userid: int
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def amount(self) -> float:
        """Gets the amount of this Expense.


        :return: The amount of this Expense.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Expense.


        :param amount: The amount of this Expense.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def _datetime(self) -> datetime:
        """Gets the _datetime of this Expense.


        :return: The _datetime of this Expense.
        :rtype: datetime
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime: datetime):
        """Sets the _datetime of this Expense.


        :param _datetime: The _datetime of this Expense.
        :type _datetime: datetime
        """
        if _datetime is None:
            raise ValueError("Invalid value for `_datetime`, must not be `None`")  # noqa: E501

        self.__datetime = _datetime

    @property
    def description(self) -> str:
        """Gets the description of this Expense.


        :return: The description of this Expense.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Expense.


        :param description: The description of this Expense.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def comment(self) -> str:
        """Gets the comment of this Expense.


        :return: The comment of this Expense.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Expense.


        :param comment: The comment of this Expense.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment
