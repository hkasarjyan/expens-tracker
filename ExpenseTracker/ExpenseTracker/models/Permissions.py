# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ExpenseTracker.models.base_model_ import Model
from ExpenseTracker import util
from enum import Enum

class Permission(Enum):
    READ_SELF      = 'READ_SELF'
    READ_USERS     = 'READ_USERS'
    READ_ADMINS    = 'READ_ADMINS'
    WRITE_USERS    = 'WRITE_USERS'
    WRITE_ADMINS   = 'WRITE_ADMINS'
    WRITE_SELF     = 'WRITE_SELF'
    READ_EXPENSES  = 'READ_EXPENSES'
    WRITE_EXPENSES = 'WRITE_EXPENSES'

class Permissions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_permissions: List[str]=None):  # noqa: E501
        """Permissions - a model defined in Swagger

        :param user_permissions: The user_permissions of this Permissions.  # noqa: E501
        :type user_permissions: List[str]
        """
        self.swagger_types = {
            'user_permissions': List[str]
        }

        self.attribute_map = {
            'user_permissions': 'user_permissions'
        }

        self._user_permissions = user_permissions

    @classmethod
    def from_dict(cls, dikt) -> 'Permissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Permissions of this Permissions.  # noqa: E501
        :rtype: Permissions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_permissions(self) -> List[str]:
        """Gets the user_permissions of this Permissions.


        :return: The user_permissions of this Permissions.
        :rtype: List[str]
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions: List[str]):
        """Sets the user_permissions of this Permissions.


        :param user_permissions: The user_permissions of this Permissions.
        :type user_permissions: List[str]
        """
        if user_permissions is None:
            raise ValueError("Invalid value for `user_permissions`, must not be `None`")  # noqa: E501

        self._user_permissions = user_permissions
